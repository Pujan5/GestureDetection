# -*- coding: utf-8 -*-
"""gdd

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12bq9xfCbR2LGOzI_9rkDD_xcMWDsWGbT
"""

import  tensorflow  as  tf
import  numpy  as  np
import  pandas  as  pd
import  cv2
import  matplotlib . pyplot  as  plt
import  os
from  tensorflow . keras  import  models , layers , optimizers
from  keras . models  import  Model
from  tensorflow . keras . preprocessing . image  import  ImageDataGenerator , array_to_img , img_to_array , load_img
import  random

from google.colab import drive
drive.mount('/content/drive')

datagen  =  ImageDataGenerator (
        rotation_range = 5 ,
        width_shift_range = 0.2 ,
        height_shift_range = 0.2 ,
        shear_range = 0.2 ,
        zoom_range = 0.2 ,
        horizontal_flip = True ,
        fill_mode = 'nearest' )

path  =  '/content/drive/My Drive/dataset/'
for  folder  in  os . listdir ( path ):
    path_  =  path  +  folder  +  '/'
    # print ("FOLDER", folder)
    for  file  in  os.listdir ( path_ ):
        # print (file)
        if  file . endswith ( '.jpeg' ) and  not  "_gen"  in  file :
            
            img  =  load_img ( path_ + file )
            x  =  img_to_array ( img )  
            x  =  x . reshape (( 1 ,) +  x . shape )

            # the .flow () command below generates batches of randomly transformed images
            # and saves the results to the `preview /` directory
            i  =  0
            for  batch  in  datagen.flow ( x , batch_size = 1 ,save_to_dir = '/content/drive/My Drive/dataset/' + folder , save_prefix = str ( folder ) + 'gen',save_format = 'jpeg' ):
                i  +=  1
                if  i  >  5 :
                    break   # Generator stop feature

path  =  '/content/drive/My Drive/dataset/up'
images  = []
labels  = []
images_color  = []

for  file  in  os . listdir ( path ):
    img  =  cv2 . imread ( path + '/' + file )    
    gray  =  cv2 . cvtColor ( img , cv2 . COLOR_BGR2GRAY )    
    resized  =  cv2 . resize ( gray , ( 100 , 100 ))
    resized  =  np . append ( resized , 1 )
    images . append ( resized )

path2  =  path  =  '/content/drive/My Drive/dataset/down'
for  file  in  os . listdir ( path2 ):
    img  =  cv2 . imread ( path2 + '/' + file )
    gray  =  cv2 . cvtColor ( img , cv2 . COLOR_BGR2GRAY )    
    resized  =  cv2 . resize ( gray , ( 100 , 100 ))
    resized  =  np . append ( resized , 0 )
    images . append ( resized )

random . shuffle ( images )

labels  =  np . asarray ([ image [ - 1 ] for  image  in  images ])#for labels
images  =  np . asarray ([ image [ 0 : - 1 ]. reshape ( 100 , 100 , 1 ) for  image  in  images ])


images  =  images . astype ( 'float32' )
images   =   ( images ) /  255

index_split  =  round ( 0.8 * len ( images ))

train_images  =  images [ 0 : index_split ]
test_images  =  images [ index_split ::]
train_labels  =  labels [ 0 : index_split ]
test_labels  =  labels [ index_split ::]

model  =  models . Sequential ()
model . add ( layers . Conv2D ( 32 , ( 3 , 3 ), activation = 'relu' , input_shape = ( 100 , 100 , 1 )))
model . add ( layers . MaxPooling2D (( 2 , 2 )))
model . add ( layers . Conv2D ( 512 , ( 3 , 3 ), activation = 'relu' ))
model . add ( layers . MaxPooling2D (( 2 , 2 )))
model . add ( layers . Dropout ( 0.3 ))
model . add ( layers . Conv2D ( 256 , ( 3 , 3 ), activation = 'relu' ))
model . add ( layers . MaxPooling2D (( 2 , 2 )))
model . add ( layers . Conv2D ( 512 , ( 3 , 3 ), activation = 'relu' ))
model . add ( layers . MaxPooling2D (( 2 , 2 )))
model . add ( layers . Dropout ( 0.3 ))
model . add ( layers . Conv2D ( 256 , ( 3 , 3 ), activation = 'relu' ))
model . add ( layers . MaxPooling2D (( 2 , 2 )))
model . add ( layers . Flatten ())
model . add ( layers . Dense ( 512 , activation = 'relu' ))
model . add ( layers . Dense ( 1 , activation = 'sigmoid' ))

model . compile ( loss = 'binary_crossentropy' ,
              optimizer = "adam" ,
              metrics = [ 'accuracy' ])

history  =  model . fit ( train_images , train_labels , epochs = 10 , steps_per_epoch=10,validation_data = ( test_images , test_labels ))

acc  =  history . history [ 'accuracy' ]
val_acc  =  history . history [ 'val_accuracy' ]
epochs  =  range ( 1 , len ( acc ) +  1 )

plt . plot ( epochs , acc , 'bo' , label = 'Training acc' )
plt . plot ( epochs , val_acc , 'b' , label = 'Validation acc' )
plt . title ( 'Training and validation accuracy' )
plt . xlabel ( 'Epochs' )
plt . ylabel ( 'accuracy' )
plt . legend ()
plt . show ()

#model . save.h5 ( './pujanGD_test.H5' )

#New_Model = tf.keras.models.load_model('pujanGD_test.H5')

#tf.keras.models.save_model(New_Model, 'New_Model.h5')
model . save ( './new_test' )

model = keras.models.load_model('/content/new_test')

from tensorflow import keras

#testing_path='/content/drive/My Drive/images.jpeg'
#for i in os.listdir(testing_path):
#  img=cv2.imread(testing_path+'//'+ i) 
#  #st.image(cv2.cvtColor(img, cv2.COLOR_BGR2RGB),width=200)  
#  gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)    
#  resized = cv2.resize(gray, (100, 100)).astype('float32')
#  resized = resized.reshape(100,100,1)
#  resized = np.expand_dims(resized, axis=0)
#  test = resized/255

#  result = model.predict_classes(test)
  
  
#  print(result)
#  if result == 1:
#    print( i +"  YES!")
            
#  if result == 0:
#    print( i+ "  thumbs down!")

img = cv2.imread('/content/drive/My Drive/puji.jpg')  
#st.image(cv2.cvtColor(img, cv2.COLOR_BGR2RGB),width=200)  
gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)    
resized = cv2.resize(gray, (100, 100)).astype('float32')
resized = resized.reshape(100,100,1)
resized = np.expand_dims(resized, axis=0)
test = resized/255

result = model.predict_classes(test)
print(result)
if result == 1:
            print( "thumbs up!")
if result == 0:
        	print( "thumbs down!")

